<!DOCTYPE html>
<html lang="en">
  <!-- molla/index-12.html  22 Nov 2019 09:58:43 GMT -->
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <title>Beep Audio</title>
    <meta name="keywords" content="HTML5 Template" />
    <meta name="description" content="Molla - Bootstrap eCommerce Template" />
    <meta name="author" content="p-themes" />
    <!-- Plugins CSS File -->
    <link rel="stylesheet" href="/assets/css/bootstrap.min.css" />
    <link
      rel="stylesheet"
      href="/assets/css/plugins/owl-carousel/owl.carousel.css"
    />
    <link
      rel="stylesheet"
      href="/assets/css/plugins/magnific-popup/magnific-popup.css"
    />
    <!-- Main CSS File -->
    <link rel="stylesheet" href="/assets/css/style.css" />
    <link rel="stylesheet" href="/assets/css/demos/demo-12.css" />
  </head>
  <main class="main">
    <div
      class="page-header text-center"
      style="background-image: url('assets/images/page-header-bg.jpg')"
    >
      <div class="container">
        <h1 class="page-title">Shopping Cart<span>Shop</span></h1>
      </div>
      <!-- End .container -->
    </div>
    <!-- End .page-header -->
    <nav aria-label="breadcrumb" class="breadcrumb-nav">
      <div class="container">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item active" aria-current="page">
            Shopping Cart
          </li>
        </ol>
      </div>
      <!-- End .container -->
    </nav>
    <!-- End .breadcrumb-nav -->

    <div class="page-content">
      <div class="cart">
        <div class="container">
          <div class="row">
            <div class="col-lg-9">
              <table class="table table-cart table-mobile">
                <thead>
                  <tr>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th></th>
                  </tr>
                </thead>

                <tbody>
                  <% items.forEach(item => { %>
                  <tr>
                    <td class="product-col">
                      <div class="product">
                        <figure class="product-media">
                          <a href="#">
                            <img
                              src="/upload/product-images/<%= item.product.productImage[0] %>"
                              alt="Product image"
                            />
                          </a>
                        </figure>
                        <h3 class="product-title">
                          <a href=""><%= item.product.productName %></a>
                        </h3>
                        <!-- End .product-title -->
                      </div>
                      <!-- End .product -->
                    </td>
                    <td class="price-col">₹<%= item.product.salePrice %></td>
                    <td class="quantity-col">
                      <div class="cart-product-quantity d-flex">
                        <button
                          class="btn-decrement"
                          data-product-id="<%= item.product._id %>"
                        >
                          -
                        </button>
                        <input
                          type="number"
                          class="form-control"
                          value="<%= item.quantity %>"
                          min="1"
                          max="5"
                          step="1"
                          data-decimals="0"
                          data-product-id="<%= item.product._id %>"
                          data-product-quantity ="<%= item.product.quantity %>"
                          required
                          readonly
                        />
                        <button
                          class="btn-increment"
                          data-product-id="<%= item.product._id %>"
                        >
                          +
                        </button>
                      </div>
                    </td>
                    <td class="total-col">
                      ₹<%=item.product.salePrice * item.quantity %>
                    </td>
                    <td class="remove-col">
                      <button
                        class="btn-remove"
                        data-product-id="<%= item.product._id %>"
                      >
                        <i class="icon-close"></i>
                      </button>
                    </td>
                  </tr>
                  <% }) %>
                </tbody>
              </table>
              <!-- End .table table-wishlist -->

              <div class="cart-bottom">
                <div class="cart-discount">
                  <form action="#">
                    <div class="input-group">
                      <input
                        type="text"
                        class="form-control"
                        required
                        placeholder="coupon code"
                      />
                      <div class="input-group-append">
                        <button class="btn btn-outline-primary-2" type="submit">
                          <i class="icon-long-arrow-right"></i>
                        </button>
                      </div>
                      <!-- .End .input-group-append -->
                    </div>
                    <!-- End .input-group -->
                  </form>
                </div>
                <!-- End .cart-discount -->

                <a href="#" class="btn btn-outline-dark-2"
                  ><span>UPDATE CART</span><i class="icon-refresh"></i
                ></a>
              </div>
              <!-- End .cart-bottom -->
            </div>
            <!-- End .col-lg-9 -->
            <aside class="col-lg-3">
              <div class="summary summary-cart">
                <h3 class="summary-title">Cart Total</h3>
                <!-- End .summary-title -->

                <table class="table table-summary">
                  <tbody>
                    <tr class="summary-total">
                      <td>Total:</td>
                      <td>$</td>
                    </tr>
                    <!-- End .summary-total -->
                  </tbody>
                </table>
                <!-- End .table table-summary -->

                <a href="<%= items.length > 0 ? '/checkout' : 'javascript:void(0);' %>"
                  class="btn btn-outline-primary-2 btn-order btn-block"
                  id="checkoutButton"
                  data-item-count="<%= items.length %>">
                  PROCEED TO CHECKOUT
               </a>
              </div>
              <!-- End .summary -->

              <a
                href="/shop"
                class="btn btn-outline-dark-2 btn-block mb-3"
                ><span>CONTINUE SHOPPING</span><i class="icon-refresh"></i
              ></a>
            </aside>
            <!-- End .col-lg-3 -->
          </div>
          <!-- End .row -->
        </div>
        <!-- End .container -->
      </div>
      <!-- End .cart -->
    </div>
    <!-- End .page-content -->
  </main>
  <!-- End .main -->


  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    document.getElementById('checkoutButton').addEventListener('click', function(event) {
    const itemCount = parseInt(this.getAttribute('data-item-count'), 10);
    
    if (itemCount === 0) {
        event.preventDefault(); // Prevent the default link action
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'There are no items in your cart.',
        });
    }
});

  </script>

  <script>

    updateCartSummary()
    // Function to update the total for an item
    function updateTotal(inputElement) {
      const quantity = parseInt(inputElement.value);
      const price = parseFloat(
        inputElement
          .closest("tr")
          .querySelector(".price-col")
          .innerText.replace("₹", "")
      );
      const totalCell = inputElement.closest("tr").querySelector(".total-col");

      totalCell.innerText = "₹" + (quantity * price).toFixed(2); // Update total
      updateCartSummary(); // Update cart summary total
    }

    // Function to change quantity
    function changeQuantity(inputElement, increment) {
      const productQuantity = inputElement.dataset.productQuantity
      let quantity = parseInt(inputElement.value);
      const product = inputElement.dataset.productId;
      console.log(product)

      if (increment) {
        if (quantity < parseInt(inputElement.max)&&quantity<productQuantity) {
          // Ensure max limit
          quantity++;
        }
        else{
          Swal.fire({
              icon: "error",
              title: "Error!",
              text:"Cannot add more",
              showConfirmButton: true, // Removes the OK button since it will auto-close
            });
        }
      } else {
        if (quantity > 1) {
          // Ensure minimum limit
          quantity--;
        }else{
          Swal.fire({
              icon: "error",
              title: "Error!",
              text:"Cannot reduce more than 1",
              showConfirmButton: true, // Removes the OK button since it will auto-close
            });
        }
      }

      inputElement.value = quantity; // Update the input field
      updateTotal(inputElement); // Update total price
      updateQuantityInDB(product, quantity); // Update quantity in the database
    }

    // Function to update the cart summary
    function updateCartSummary() {
      const totalElements = document.querySelectorAll(".total-col");
      let grandTotal = 0;

      totalElements.forEach((element) => {
        grandTotal += parseFloat(element.innerText.replace("₹", ""));
      });

      // Update the total in the cart summary
      const totalRow = document.querySelector(".summary-total td:last-child");
      totalRow.innerText = "₹" + grandTotal.toFixed(2);
    }

    // Function to update the quantity in the database
    function updateQuantityInDB(product, quantity) {
      fetch(`/updateQuantity`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ product, quantity }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            console.log("Quantity updated successfully");
          } else {
            Swal.fire({
              icon: "error",
              title: "Error!",
              text: data.message,
              timer: 2000, // 2 seconds
              timerProgressBar: true, // Shows a progress bar
              showConfirmButton: false, // Removes the OK button since it will auto-close
            });
          }
        })
        .catch((error) => {
          Swal.fire({
              icon: "error",
              title: "Error!",
              text: data.message,
              showConfirmButton: true, // Removes the OK button since it will auto-close
            });
        });
    }

    // Function to remove an item from the cart
    function removeItem(product, button) {
      const row = button.closest("tr"); // Get the row of the clicked button
      Swal.fire({
        title: "Are you sure?",
        text: "Do you really want to remove this product?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, remove it!",
        cancelButtonText: "No, keep it",
    }).then(async (result) => {
        if (result.isConfirmed) {
      fetch(`/removeItem`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ product }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            row.remove(); // Remove the row from the DOM
            updateCartSummary(); // Update cart summary total
          } else {
            Swal.fire({
              icon: "error",
              title: "Error!",
              text: "Failed to remove item",
              timer: 2000, // 2 seconds
              timerProgressBar: true, // Shows a progress bar
              showConfirmButton: false, // Removes the OK button since it will auto-close
            });
          }
        })
      }
    })
        .catch((error) => {
          console.error("Error removing item:", error);
        });
    }

    // Event listeners for increment, decrement buttons and remove button
    document.addEventListener("DOMContentLoaded", () => {
      // Increment quantity
      document.querySelectorAll(".btn-increment").forEach((button) => {
        button.addEventListener("click", (event) => {
          const input = event.target.previousElementSibling; // Get the input field
          changeQuantity(input, true); // Increment quantity
        });
      });

      // Decrement quantity
      document.querySelectorAll(".btn-decrement").forEach((button) => {
        button.addEventListener("click", (event) => {
          const input = event.target.nextElementSibling; // Get the input field
          changeQuantity(input, false); // Decrement quantity
        });
      });

      // Remove item on button click
      document.querySelectorAll(".btn-remove").forEach((button) => {
        button.addEventListener("click", (event) => {
          const item = event.target.closest("[data-product-id]");
          const product = item.getAttribute("data-product-id");
          removeItem(product, event.target); // Remove item when button is clicked
        });
      });
    });
  </script>

  <style>
    .cart-product-quantity input[readonly] {
      width: 7.5rem;
      cursor: default; /* Set cursor to default */
      background-color: #f8f9fa; /* Optional: Change background color to indicate it's read-only */
      border: none; /* Optional: Remove border */
    }

    .cart-product-quantity input[readonly]:focus {
      outline: none; /* Remove focus outline */
    }

    .cart-product-quantity button {
      width: 30px; /* Set button width */
      height: 40px; /* Set button height */
      border: 1px solid #ccc; /* Button border */
      background-color: #f8f9fa; /* Button background */
      cursor: pointer; /* Pointer cursor on hover */
    }

    .cart-product-quantity button:hover {
      background-color: #e2e6ea; /* Button hover background */
    }
  </style>
</html>
