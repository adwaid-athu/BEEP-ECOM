<%- include('../partials/user/header.ejs') %>

<div class="container mt-5">
    <h2>Order Details</h2>

    <!-- Order Information -->
    <div class="card mb-4">
        <div class="card-header">Order Information</div>
        <div class="card-body">
            <p><strong>Order ID:</strong> <%= order.orderId %></p>
            <p><strong>Invoice Date:</strong> <%= new Date(order.invoiceDate).toLocaleDateString() %></p>
            <p><strong>Created On:</strong> <%= new Date(order.createdOn).toLocaleDateString() %></p>
            <p><strong>Status:</strong> <%= order.status %></p>
        </div>
    </div>

    <!-- Customer Information -->
    <div class="card mb-4">
        <div class="card-header">Shipping Information</div>
        <div class="card-body">
            <p><strong>Name:</strong> <%= order.address.name %></p>
            <p><strong>Address:</strong> <%= order.address.landMark %>, <%= order.address.city %>, <%= order.address.state %>, <%= order.address.pincode %></p>
            <p><strong>Phone:</strong> <%= order.address.phone %></p>
            <p><strong>Alternate Phone:</strong> <%= order.address.altPhone || 'N/A' %></p>
        </div>
    </div>

    <!-- Ordered Items Table -->
    <div class="table-responsive mb-4">
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                <% order.orderedItems.forEach(item => { %>
                    
                    <tr>
                        <td><%= item.product.productName %></td>
                        <td><%= item.quantity %></td>
                        <td>₹<%= item.price %></td>
                        <td>₹<%= (item.price * item.quantity).toFixed(2) %></td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
    </div>

    <!-- Payment and Summary -->
    <div class="card">
        <div class="card-header">Payment & Summary</div>
        <div class="card-body">
            <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
            <p><strong>Total Price:</strong> ₹<%= (order.finalAmount+order.discount).toFixed(2)%></p>
            <p><strong>Discount:</strong> ₹<%= order.discount ? order.discount.toFixed(2) : "0.00" %></p>
            <p><strong>Final Amount:</strong> ₹<%= order.finalAmount ? order.finalAmount.toFixed(2) : "0.00" %></p>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="mt-4 mb-1">
        <a href="/dashboard" class="btn btn-secondary mr-2">Back to Orders</a>
        <% if (order.status !== 'Cancelled' && order.status !== 'Delivered') { %>
            <button id="cancelOrderBtn" class="btn btn-danger">Cancel Order</button>
        <% } %>
        <% if (order.status != 'Pending') { %>
            <button id="ReturnOrderBtn" class="btn btn-warning mr-2">Return Order</button>
            <button id="invoiceDownloadBtn" class="btn btn-info mr-2">Invoice Download</button>
        <% } %>
        <% if (order.status == "Pending") { %>
            <button id="continuePaymentBtn" class="btn btn-success ml-2">Continue Payment</button>
        <% } %>
    </div>
</div>

<%- include('../partials/user/footer.ejs') %>

<style>
    .card-header {
        font-weight: bold;
        font-size: 1.1rem;
    }
    .table td, .table th {
        text-align: center;
        vertical-align: middle;
    }
</style>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>

    const orderId = "<%= order.orderId %>";

 

    document.getElementById("cancelOrderBtn")?.addEventListener("click", async function() {
        Swal.fire({
            title: "Are you sure?",
            text: "Do you really want to cancel this order?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, cancel it!",
            cancelButtonText: "No, keep it",
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/cancel/${orderId}`, { method: 'POST' });
                    if (response.ok) {
                        Swal.fire({
                            title: "Cancelled!",
                            text: "Your order has been cancelled successfully.",
                            icon: "success",
                            confirmButtonColor: "#3085d6",
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: "Failed to cancel the order. Please try again.",
                            icon: "error",
                            confirmButtonColor: "#3085d6",
                        });
                    }
                } catch (error) {
                    console.error("Error cancelling order:", error);
                    Swal.fire({
                        title: "Error",
                        text: "An error occurred. Please try again.",
                        icon: "error",
                        confirmButtonColor: "#3085d6",
                    });
                }
            }
        });
    });

    document.getElementById("ReturnOrderBtn")?.addEventListener("click", async function() {
        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to return this order?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, return it!",
            cancelButtonText: "No, keep it",
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/return/${orderId}`, { method: 'POST' });
                    if (response.ok) {
                        Swal.fire({
                            title: "Returned!",
                            text: "Your order return request has been submitted successfully.",
                            icon: "success",
                            confirmButtonColor: "#3085d6",
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: "Failed to submit the return request. Please try again.",
                            icon: "error",
                            confirmButtonColor: "#3085d6",
                        });
                    }
                } catch (error) {
                    console.error("Error returning order:", error);
                    Swal.fire({
                        title: "Error",
                        text: "An error occurred. Please try again.",
                        icon: "error",
                        confirmButtonColor: "#3085d6",
                    });
                }
            }
        });
    });
    document.getElementById("invoiceDownloadBtn")?.addEventListener("click", async function() {
    try {
        const response = await fetch(`/invoiceDownload/${orderId}`, { method: 'POST' });

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.style.display = "none";
            a.href = url;
            a.download = `invoice-${orderId}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            a.remove();
        } else {
            const errorMessage = await response.text();
            Swal.fire({
                title: "Error",
                text: errorMessage || "Failed to Download the invoice. Please try again.",
                icon: "error",
                confirmButtonColor: "#3085d6",
            });
        }
    } catch (error) {
        console.error("Error Downloading Invoice order:", error);
        Swal.fire({
            title: "Error",
            text: "An error occurred. Please try again.",
            icon: "error",
            confirmButtonColor: "#3085d6",
        });
    }
})


   
document.addEventListener('DOMContentLoaded', function () {

const continuePaymentBtn = document.getElementById('continuePaymentBtn');

if (continuePaymentBtn) {
    continuePaymentBtn.addEventListener('click', async function () {
        try {
            // Send a POST request to the backend to continue the payment process
            const orderId = "<%= order.orderId %>";  // Get the orderId dynamically from your view

            const response = await fetch("/continuePayment", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",  // Ensure the request content type is JSON
                },
                body: JSON.stringify({
                    orderId: orderId  // Send orderId in the request body
                }),
            });

            const res = await response.json();  // Parse the JSON response

            if (res.success) {
                // If order creation was successful, open the Razorpay modal
                const options = {
                    key: res.key_id,  // Razorpay API Key
                    amount: res.amount,  // Total amount (in paise)
                    currency: "INR",  // Currency (Indian Rupee)
                    name: res.product_name,  // Product name
                    description: res.description,  // Product description
                    image: "https://dummyimage.com/600x400/000/fff",  // Placeholder image URL
                    order_id: res.order_id,  // Razorpay order ID
                    handler: function (paymentResponse) {
                        // Handle the payment response (payment success)
                        fetch("/orderStatusUpdate", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({
                                orderId: res.orderId,  // Send the orderId to backend for stock update
                            }),
                        })
                        .then((updateRes) => updateRes.json())
                        .then((updateData) => {
                            if (updateData.success) {
                                window.location.reload() 
                            } else {
                                alert("Error: " + updateData.message);  // Handle error in stock update
                            }
                        })
                        .catch((error) => {
                            console.error("Error completing operation:", error);
                            alert("An unexpected error occurred. Please try again.");
                        });
                    },
                    prefill: {
                        contact: res.contact,  // Prefill the phone number
                        name: res.name,  // Prefill the name
                        email: res.email,  // Prefill the email
                    },
                    notes: {
                        address: res.address,  // Prefill the address if available
                    },
                    theme: {
                        color: "#F37254",  // Razorpay theme color
                    },
                };

                var rzp = new Razorpay(options);  // Create Razorpay instance with the options
                rzp.open();  // Open the Razorpay payment modal
            } else {
                alert("Error creating order: " + res.message);  // Handle error if order creation fails
            }

        } catch (error) {
            console.error("Error during payment process:", error);
            alert("An error occurred: " + error.message);  // Handle any errors during the payment process
        }
    });
}
});

</script>