<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f3f4f6;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 600px;
            margin: 50px auto;
            padding: 50px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
            font-size: 24px;
        }

        label {
            font-weight: bold;
            margin-top: 15px;
            display: block;
            color: #444;
        }

        input[type="text"],
        input[type="number"],
        select,
        textarea {
            width: 100%;
            padding: 12px;
            margin-top: 5px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus,
        input[type="number"]:focus,
        select:focus,
        textarea:focus {
            border-color: #007bff;
            outline: none;
        }

        button {
            width: 100%;
            padding: 12px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #0056b3;
        }

        .error {
            color: #e74c3c;
            font-size: 14px;
            margin-bottom: 10px;
        }

        #imagePreviewContainer {
            display: flex;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .image-wrapper {
            position: relative;
            margin: 5px;
        }

        .image-wrapper img {
            width: 100px;
            height: auto;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s;
            cursor: pointer;
        }

        .image-wrapper img:hover {
            transform: scale(1.05);
        }

        .remove-btn {
            position: absolute;
            top: 0;
            right: 0;
            background: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .remove-btn:hover {
            background: rgba(255, 0, 0, 0.9);
        }

        #cropperModal {
            display: none;
            position: fixed;
            top: 30vh;
            left: 50%;
            transform: translateX(-50%);
            width: 400px;
            height: auto;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        #cropperContainer {
            background: rgb(0, 0, 0);
            padding: 20px;
            border-radius: 8px;
        }

        #cropImage {
            max-width: 100%;
        }

        #cropBtn,
        #closeCropper {
            margin-top: 10px;
        }
        div#existingImageContainer {
    display: flex;
}
    </style>
</head>

<body>
    <div class="container">
        <h2>Edit Product</h2>

        <form id="editProductForm" enctype="multipart/form-data"  onsubmit="return validateForm()">
            <label for="productName">Product Name</label>
            <input type="text" id="productName" name="productName" value="<%= product.productName %>">
            <div id="productNameError" class="error"></div>

            <label for="productDescription">Product Description</label>
            <textarea id="productDescription" name="productDescription" rows="3"><%= product.description %></textarea>
            <div id="productDescriptionError" class="error"></div>

            <label for="productPrice">Price</label>
            <input type="number" id="regularPrice" name="regularPrice" value="<%= product.regularPrice %>">
            <div id="productPriceError" class="error"></div>

            <label for="productSalePrice">Sale Price</label>
            <input type="number" id="salePrice" name="salePrice" value="<%= product.salePrice %>">
            <div id="productSalePriceError" class="error"></div>

            <label for="productQuantity">Quantity</label>
            <input type="number" id="quantity" name="quantity" value="<%= product.quantity %>">
            <div id="productQuantityError" class="error"></div>

            <label class="form-label">Category</label>
            <select name="category" class="form-select shadow form-control">
                <% categories.forEach(category=> { %>
                    <option value="<%= category._id %>" <%=category._id.equals(product.category)
                        ? 'selected' : '' %>>
                        <%= category.name %>
                    </option>
                    <% }); %>
            </select>
            <div id="productCategoryError" class="error"></div>

            <label class="form-label">Brand</label>
            <select name="brands" class="form-select shadow form-control">
                <% brands.forEach(brand=> { %>
                    <option value="<%= brand._id %>" <%=brand._id.equals(product.brand)
                        ? 'selected' : '' %>>
                        <%= brand.brandName %>
                    </option>
                    <% }); %>
            </select>
            <div id="productBrandError" class="error"></div>

            <label class="form-label">Status</label>
            <select name="status" class="form-select shadow form-control">
                <option value="Available" <%=product.status==='Available' ? 'selected' : ''
                    %>>Available</option>
                <option value="Out of Stock" <%=product.status==='Out of Stock' ? 'selected'
                    : '' %>>Out of Stock</option>
                <option value="Discontinued" <%=product.status==='Discontinued' ? 'selected'
                    : '' %>>Discontinued</option>
            </select>
            <label class="form-label">Offer</label>
            <select name="offer" class="form-select shadow form-control">
                <option value="" <%= !product.offer ? 'selected' : '' %>>None</option>
                <% offers.forEach(offer => { %>
                    <option value="<%= offer._id %>" <%= offer._id.equals(product.offer) ? 'selected' : '' %>>
                        <%= offer.title %>
                    </option>
                <% }); %>
            </select>
            
            <label class="form-label">Add New Images</label>
            <input type="file" name="images" class="form-control shadow" id="fileInput" accept="image/jpeg, image/jpg, image/png, image/gif" multiple onchange="previewImages(event)">
            <div id="productImageError" class="error"></div>
            <div id="imagePreviewContainer">
                
            </div>


            
            <label class="form-label">Existing Images</label>
            <div id="existingImageContainer">
                <% if (product.productImage && product.productImage.length > 0) { %>
                    <% product.productImage.forEach(function(image, index) { %>
                        <div class="image-wrapper" id="existingImage<%= index %>">
                            <img src="/upload/product-images/<%= image %>" alt="Product Image" class="existing-image">
                            <button type="button" class="remove-btn" onclick="removeExistingImage('<%= image %>','<%= index %>')">X</button>
                        </div>
                    <% }) %>
                <% } %>
            </div>
            
            <input type="hidden" name="existingImages" id="existingImages" value='<%= JSON.stringify(product.productImage) %>'>
            <input type="hidden" name="removedImages" id="removedImages" value="[]">
            
            
            <button type="submit">Save Changes</button>
        </form>
    </div>

    <div id="cropperModal">
        <div id="cropperContainer">
            <img id="cropImage" src="" alt="Crop Image">
            <button id="cropBtn">Crop</button>
            <button id="closeCropper">Close</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let cropper;
        let currentImageSrc;
        let uploadedFiles = [];
        let existingImages = JSON.parse(document.getElementById('existingImages').value || '[]');
        let removedImages = JSON.parse(document.getElementById('removedImages').value || '[]');
    
        function removeExistingImage(imageName, index) {
            // Remove image from DOM
            document.getElementById(`existingImage${index}`).remove();
    
            // Update removed images list
            removedImages.push(imageName);
            document.getElementById('removedImages').value = JSON.stringify(removedImages);
    
            // Remove the image from the existing images list
            existingImages = existingImages.filter(img => img !== imageName);
            document.getElementById('existingImages').value = JSON.stringify(existingImages);
        }
    
        function previewImages(event) {
            const files = event.target.files;
            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            imagePreviewContainer.innerHTML = ''; // Clear previous previews
    
            document.getElementById('productImageError').textContent = ''; // Clear previous error messages
    
            // Loop through the selected files
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
    
                // Check for valid file types
                if (!allowedTypes.includes(file.type)) {
                    alert('Only image files (jpg, jpeg, png, gif) are allowed!');
                    event.target.value = ''; // Clear the input
                    return; // Exit the function
                }
    
                // Prevent adding duplicate files
                if (!uploadedFiles.some(uploadedFile => uploadedFile.name === file.name)) {
                    uploadedFiles.push(file); // Add the file to the global array
    
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        // Create the image wrapper only once
                        const imgElement = document.createElement('img');
                        imgElement.src = e.target.result;
                        imgElement.classList.add('preview-image'); // Add a class for styling if needed
    
                        const removeBtn = document.createElement('button');
                        removeBtn.innerHTML = 'X';
                        removeBtn.classList.add('remove-btn');
    
                        const imgWrapper = document.createElement('div');
                        imgWrapper.classList.add('image-wrapper');
                        imgWrapper.appendChild(imgElement);
                        imgWrapper.appendChild(removeBtn);
    
                        imagePreviewContainer.appendChild(imgWrapper); // Append the wrapper to the preview container
    
                        // Open cropper when the image is clicked
                        imgElement.addEventListener('click', function () {
                            openCropper(e.target.result); // Pass the file to the cropper
                        });
    
                        // Remove image functionality
                        removeBtn.addEventListener('click', function () {
                            imagePreviewContainer.removeChild(imgWrapper); // Remove the image wrapper from DOM
    
                            // Remove the file from the uploadedFiles array
                            const index = uploadedFiles.indexOf(file);
                            if (index > -1) {
                                uploadedFiles.splice(index, 1); // Remove the file from the array
                            }
    
                            // Update the file input value
                            const dataTransfer = new DataTransfer();
                            uploadedFiles.forEach(uploadedFile => dataTransfer.items.add(uploadedFile));
                            document.getElementById('fileInput').files = dataTransfer.files; // Update the input files
                        });
                    };
    
                    reader.readAsDataURL(file); // Read the file as data URL
                }
            }
        }
    
        // Ensure to handle file input change
        document.getElementById('fileInput').addEventListener('change', previewImages);
    
        function openCropper(imageSrc) {
            currentImageSrc = imageSrc;
            document.getElementById('cropImage').src = imageSrc;
            document.getElementById('cropperModal').style.display = 'flex';
    
            const cropImage = document.getElementById('cropImage');
            cropper = new Cropper(cropImage, {
                aspectRatio: 1 / 1,
                viewMode: 1,
            });
        }
    
        document.getElementById('cropBtn').addEventListener('click', function () {
            const croppedCanvas = cropper.getCroppedCanvas();
            const croppedImage = croppedCanvas.toDataURL();
    
            const imgWrappers = document.querySelectorAll('.image-wrapper img');
            imgWrappers.forEach(img => {
                if (img.src === currentImageSrc) {
                    img.src = croppedImage;
                }
            });
    
            closeCropper();
        });
    
        document.getElementById('closeCropper').addEventListener('click', closeCropper);
    
        function closeCropper() {
            document.getElementById('cropperModal').style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }
    
        // Validation Logic
        function validateForm() {
            let isValid = true;
            let productName = document.getElementById('productName').value.trim();
            let productDescription = document.getElementById('productDescription').value.trim();
            let productPrice = document.getElementById('regularPrice').value;
            let productSalePrice = document.getElementById('salePrice').value;
            let productQuantity = document.getElementById('quantity').value;
    
            // Validate Product Name
            if (productName === "") {
                isValid = false;
                document.getElementById('productNameError').innerText = "Product name is required.";
            } else {
                document.getElementById('productNameError').innerText = "";
            }
    
            // Validate Product Description
            if (productDescription === "") {
                isValid = false;
                document.getElementById('productDescriptionError').innerText = "Product description is required.";
            } else {
                document.getElementById('productDescriptionError').innerText = "";
            }
    
            // Validate Product Price
            if (!productPrice || productPrice <= 0) {
                isValid = false;
                document.getElementById('productPriceError').innerText = "Product price must be a positive number.";
            } else {
                document.getElementById('productPriceError').innerText = "";
            }
    
            // Validate Product Sale Price
            if (productSalePrice !== "" && productSalePrice <= 0) {
                isValid = false;
                document.getElementById('productSalePriceError').innerText = "Sale price must be a positive number.";
            } else {
                document.getElementById('productSalePriceError').innerText = "";
            }
    
            // Validate Product Quantity
            if (!productQuantity || productQuantity < 0) {
                isValid = false;
                document.getElementById('productQuantityError').innerText = "Quantity must be a non-negative number.";
            } else {
                document.getElementById('productQuantityError').innerText = "";
            }
    
            return isValid;
        }
        document.getElementById('editProductForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent default form submission

        // Validate the form before sending
        if (!validateForm()) {
            return; // Stop if validation fails
        }

        const formData = new FormData(this); // Collect all form data

        // Optionally, append the removed images to formData
        if (removedImages.length > 0) {
            formData.append('removedImages', JSON.stringify(removedImages));
        }

        // Use fetch to send the form data to the server
        fetch(`/admin/editProduct/<%= product._id %>`, {
            method: 'POST',
            body: formData,
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json(); // Assuming the server returns JSON
        })
        .then(data => {
            // Handle success response
            Swal.fire({
                title: 'Success!',
                text: 'Product updated successfully.',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then(() => {
                // Optionally redirect or perform other actions
                window.location.href = '/admin/products'; // Redirect to product list
            });
        })
        .catch(error => {
            // Handle error response
            console.error('There was a problem with the fetch operation:', error);
            Swal.fire({
                title: 'Error!',
                text: 'There was an error updating the product. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    }); 
    </script>
    
</body>

</html>
